<%@ WebHandler Language="C#" Class="GetJSON2" %>

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.Linq;
using System.Linq;
using System.Reflection;
using System.Web;
using System.Web.Profile;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Workflow.Runtime;
using System.Text.RegularExpressions;
using System.Text;
using System.Web.Script.Serialization;

using System.Globalization;

using System.Xml;
using System.Runtime.Serialization.Json;
using EssayWCF;
using System.IO;

using Pageflakes.ObjectModel;

using Pageflakes.WebUtil;
using Pageflakes.Facade;
using Pageflakes.Model;
using Pageflakes.Facade.Context;
using Pageflakes.Utils;
using Pageflakes.WebFramework;
using OmarALZabir.AspectF;
using Pageflakes.RestApi;
using Pageflakes.Data;
using System.Web.SessionState;

public class GetJSON2 : IHttpHandler,IReadOnlySessionState
{

    static Regex guidRegEx = new Regex("^[A-Fa-f0-9]{32}$|" +
                        "^({|\\()?[A-Fa-f0-9]{8}-([A-Fa-f0-9]{4}-){3}[A-Fa-f0-9]{12}(}|\\))?$|" +
                        "^({)?[0xA-Fa-f0-9]{3,10}(, {0,1}[0xA-Fa-f0-9]{3,6}){2}, {0,1}({)([0xA-Fa-f0-9]{3,4}, {0,1}){7}[0xA-Fa-f0-9]{3,4}(}})$", RegexOptions.Compiled);
    public void ProcessRequest(HttpContext context)
    {
        var serialiazer = new JavaScriptSerializer(new Pageflakes.Util.MyTypeResolver());

        TimeSpan ts = new TimeSpan(0, 0, 0);
        context.Response.Cache.SetMaxAge(ts);
        context.Response.Cache.SetNoStore();
        context.Response.Cache.SetCacheability(HttpCacheability.NoCache);
        context.Response.Cache.AppendCacheExtension("must-revalidate, proxy-revalidate");
        context.Response.AddHeader("Connection", "Keep-Alive");
        context.Response.AddHeader("Content-Type", "text/javascript");
        var facade = Services.Get<Facade>();
        Guid UserID = facade.GetUserGuidFromUserName(context.Request["u"]);
        if (context.Request["s"] == "set")
        {
            //context.Response.ClearContent();          
        }
        Pageflakes.ObjectModel.PageflakesInfoService tempflakService = new PageflakesInfoService();
        PageflakeInfo tempflake;
        tempflake = tempflakService.GetPageflakesInfo(UserID);               
        context.Response.Write(";(function(){window.__json = true;window.startupInfo = (" + serialiazer.Serialize(tempflake) + ")\n window.__preCachedRSS = null})();");
        context.Response.Flush(); 
        
       //HttpContext.Current.Server.Execute("~/script/Empty.js", writers,true);
       //context.Response.Write(writer.ToString() );
        
    }

   
    public bool IsReusable {
        get {
            return false;
        }
    }

}