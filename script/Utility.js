var Browser = new Object(); var OS = new Object(); var ua = navigator.userAgent.toLowerCase(); Browser.isMozilla = (typeof document.implementation != "undefined") && (typeof document.implementation.createDocument != "undefined") && (typeof HTMLDocument != "undefined"); Browser.isIE = window.ActiveXObject ? true : false; Browser.isFirefox = (ua.indexOf("firefox") != -1); Browser.isIE6 = (ua.indexOf("msie 6") != -1); Browser.isIE7 = (ua.indexOf("msie 7") != -1); Browser.isSafari = (ua.indexOf("safari") != -1); Browser.isOpera = (typeof window.opera != "undefined"); OS.isWindows = (ua.indexOf("windows") != -1); OS.isMac = (ua.indexOf("macintosh") != -1); Array.prototype.add = function (A) { this.push(A) }; Array.prototype.removeAt = function (A) { this.splice(A, 1) }; Array.prototype.indexOf = function (C) { var B = this.length; if (B != 0) { for (var A = 0; A < B; A++) { if (this[A] == C) { return A } } } return -1 }; Array.prototype.remove = function (B) { var A = this.indexOf(B); if (A >= 0) { this.splice(A, 1) } }; Array.prototype.contains = function (B) { var A = this.indexOf(B); return (A >= 0) }; Array.prototype.find = function (B) { for (var A = 0; A < this.length; A++) { if (B(this[A])) { return this[A] } } return null }; Array.prototype.findIndex = function (B) { for (var A = 0; A < this.length; A++) { if (B(this[A])) { return A } } return -1 }; Array.prototype.forEach = function (B) { for (var A = 0; A < this.length; A++) { B(this[A], A) } }; Array.prototype.clone = function () { var A = []; for (var B = 0; B < this.length; B++) { A[B] = this[B] } return A }; Array.prototype.addRange = function (B) { for (var A = 0; A < B.length; A++) { this.push(B[A]) } }; var undefined; String.prototype.trim = function () { return this.replace(/^\s\s*/, "").replace(/\s\s*$/, "") }; String.prototype.toMapArray = function () { var A = new Array(); var B = this.split(","); for (i = 0; i < B.length; i++) { A.push(B[i]) } return A }; $Func = Func = function (code) { return function (event) { event = $fix(event); eval(code) } }; F = $F = function (A, B) { return function () { return B.apply(A, arguments) } }; function $trim(A) { A = "" + A; return A.replace(/^\s+|\s+$/, "") } function $cloneObject(A) { for (i in A) { if (typeof A[i] == "object") { this[i] = new $cloneObject(A[i]) } else { this[i] = A[i] } } } function $addScript(D, C) { var A = $(D); if (A != null) { A.setAttribute("src", C); return A } else { var B = $$("script", D); B.type = "text/javascript"; B.setAttribute("src", C); document.getElementsByTagName("head")[0].appendChild(B); return B } } $htmlEncode = htmlEncode = function (A) { return A.replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/</g, "&lt;").replace(/>/g, "&gt;") }; function $showMsg(C, B) { $("errorMsg").innerHTML = C; var A = $("messageBarClose"); if (T(A) != "Hide this Message") { A.className = ""; T(A, "Hide this Message") } $display("messageBar"); if (typeof B != "undefined") { window.setTimeout($hideMsg, B) } } function $hideMsg() { $nodisplay("messageBar") } function $$(A, E, B, D) { var C = document.createElement(A); if (E && E != "") { C.id = E } if (B && B != "") { C.className = B } if (D) { T(C, D) } return C } function $(A) { return document.getElementById(A) } T = $T = function (B, C) { var A = (typeof B == "object") ? B : $(B); if (Browser.isFirefox) { if (C) { A.textContent = C } else { return A.textContent } } else { if (C) { A.innerText = C } else { return A.innerText } } }; function $isVisible(B) { var A = B; if (typeof A != "object") { A = $(B) } return (A.style.visibility != "hidden" && A.style.display != "none") } function $nodisplay(A) { if (typeof (A) == "undefined") { return } else { if (A != null && typeof (A) == "object") { A.style.display = "none" } else { if ($(A) != null) { $(A).style.display = "none" } } } } function $display(B, A) { if (B == null) { return } if (typeof B == "object") { B.style.display = (A ? "inline" : "block") } else { if ($(B) != null) { $(B).style.display = (A ? "inline" : "block") } } } function $D() { for (var A = 0; A < arguments.length; A++) { $display(arguments[A]) } } function $ND() { for (var A = 0; A < arguments.length; A++) { $nodisplay(arguments[A]) } } function $switch(B, A) { $removeClass(B, "nodisplay"); $display(B); $nodisplay(A) } function $clearDisplay(A) { if (typeof A == "object") { A.style.display = "" } else { if ($(A) != null) { $(A).style.display = "" } } } function $hide(A) { if (typeof A == "object") { A.style.visibility = "hidden" } else { if ($(A) != null) { $(A).style.visibility = "hidden" } } } function $visible(A) { if (typeof A == "object") { A.style.visibility = "visible" } else { if ($(A) != null) { $(A).style.visibility = "visible" } } } function $toggleDisplay(A) { var B = (typeof A == "object") ? A.id : A; PU.toggleVisibility(B) } function $focus(A) { if (!$canYouSeeMe(A)) { return } if (typeof A == "object") { A.focus() } else { $(A).focus() } } function $fix(A) { if (A && A.fixed == true) { return A } else { return PU.fix(A) } } function $addClass(B, A) { Sys.UI.DomElement.addCssClass(B, A) } function $removeClass(B, A) { Sys.UI.DomElement.removeCssClass(B, A) } function $addHover(B, A) { $addEvent(B, "mouseover", function (C) { C = $fix(C); $addClass(this, A) }); $addEvent(B, "mouseout", function (C) { C = $fix(C); $removeClass(this, A) }) } function $stopBubble(A) { A = $fix(A); A.stopPropagation(); A.preventDefault(); return false } function $remove(C, B) { var A = (typeof C == "object" ? C : $(C)); if (A.nodeType == 1) { $clearEvent(A) } (B || A.parentNode).removeChild(A) } function $removeAll(A) { if (A.nodeType != 1) { return } while (A.hasChildNodes()) { $removeAll(A.firstChild); $remove(A.firstChild, A) } } function $urlParam(B) { var A = "[\\?&]" + B + "=([^&#]*)"; var E = new RegExp(A); var D = document.location.href; var C = E.exec(D); if (C == null) { return "" } else { return C[1] } } function $fixTable(A) { $("Content").style.width = App.ContentWidth } function $scrollTop() { window.scrollTo(0, 0) } function $scrollBottom() { var B, A; if (window.innerHeight && window.scrollMaxY) { A = window.innerHeight + window.scrollMaxY; B = window.innerWidth + window.scrollMaxX } else { if (document.body.scrollHeight > document.body.offsetHeight) { A = document.body.scrollHeight; B = document.body.scrollWidth } else { A = document.body.offsetHeight; B = document.body.offsetWidth } } window.scrollBy(B, A) } $delayCall = $DC = function (B, A) { window.setTimeout(B, A || 20) }; function $select(D, C, A) { Sys.UI.DomElement.addCssClass(D, C); var B = D.parentNode.firstChild; while (B != null) { if (B != D && B.tagName == A) { Sys.UI.DomElement.removeCssClass(B, C) } B = B.nextSibling } } function $selectChild(C, A, B, D) { var E = C.firstChild; while (E != null) { if (E.tagName == A) { if (D(E)) { Sys.UI.DomElement.addCssClass(E, B) } else { Sys.UI.DomElement.removeCssClass(E, B) } } E = E.nextSibling } } function $disabled(B) { var A = B; if (typeof B != "object") { A = $(B) } if (A.disabled == true) { return } A.disabled = true; A._cursor = "" + A.style.cursor; A.style.cursor = "default"; A._color = "" + A.style.color; A.style.color = "lightgrey"; A._onclick = A.onclick; A.onclick = function () { return false } } function $enabled(B) { var A = B; if (typeof B != "object") { A = $(B) } if (A.disabled == false) { return } A.disabled = false; A.style.cursor = "" + A._cursor; A.style.color = "" + A._color; A.onclick = A._onclick; A._cursor = null; A._color = null; A._onclick = null } $toggle = function (C, A) { var B = $(C); if ($isVisible(A)) { $nodisplay(A); B.className = TOGGLE_ICON_EXPAND } else { $display(A); B.className = TOGGLE_ICON_COLLAPSE } }; $helpText = function (A, B) { A.onkeydown = function (C) { if (A.value == B) { A.value = ""; A.style.color = "black" } }; A.onblur = function (C) { if (A.value == "") { A.value = B; A.style.color = "gray" } }; A.onblur() }; var $addEvent = function (B, D, C) { if (B == null) { return } if (!B._events) { B._events = {} } var E = B._events[D]; if (!E) { B._events[D] = E = [] } var A; if (B.addEventListener) { A = function (G) { return C.call(B, $fix(G)) }; B.addEventListener(D, $fix(A), false) } else { if (B.attachEvent) { A = function () { return C.call(B, $fix(window.event)) }; B.attachEvent("on" + D, A) } } E[E.length] = { handler: C, browserHandler: A} }; var $clearEvent2 = function (B) { if (B._events) { var C = B._events; for (var A in C) { var D = C[A]; for (var E = D.length - 1; E >= 0; E--) { $removeHandler(B, A, D[E].handler) } } B._events = null } }; var $removeAllEvents = $clearEvent = function (A) { $clearEvent2(A); A.onmouseup = null; A.onmousedown = null; A.onmousemove = null; A.onclick = null; A.onkeypress = null; A.onkeyup = null; A.onmouseover = null; A.onmouseout = null; A.onreadystatechange = null }; var $removeEvent = $removeHandler = function (B, E, D) { if (B._events == null) { return } var G = null, H = B._events[E], G = null; if (H == null) { return } for (var A = 0, C = H.length; A < C; A++) { if (H[A].handler === D) { G = H[A].browserHandler; break } } if (B.removeEventListener) { B.removeEventListener(E, G, false) } else { if (B.detachEvent) { B.detachEvent("on" + E, G) } } H.splice(A, 1) }; function $createCookie(C, D, E) { if (E) { var B = new Date(); B.setTime(B.getTime() + (E * 24 * 60 * 60 * 1000)); var A = "; expires=" + B.toGMTString() } else { var A = "" } document.cookie = C + "=" + D + A + "; path=/" } function $readCookie(B) { var D = B + "="; var A = document.cookie.split(";"); for (var C = 0; C < A.length; C++) { var E = A[C]; while (E.charAt(0) == " ") { E = E.substring(1, E.length) } if (E.indexOf(D) == 0) { return E.substring(D.length, E.length) } } return null } function $deleteCookie(B) { var A = new Date(); A.setTime(A.getTime() - 1); document.cookie = B += "=; expires=" + A.toGMTString() } canYouSeeMe = $canYouSeeMe = function (A) { A = $(A); do { if (!A.style) { break } if (A.style.display == "none" || A.style.visibility == "hidden" || A.className.indexOf("nodisplay") > 0 || A.className.indexOf("hidden") > 0) { return false } } while (A = A.parentNode); return true }; $PageflakesHelper = PageflakesUtility = PU = PF = { LastZIndex: 1000, $: $, $$: $$, remove: $remove, removeAll: $removeAll, display: $display, nodisplay: $nodisplay, D: $D, ND: $ND, T: T, isVisible: $isVisible, clearDisplay: $clearDisplay, hide: $hide, visible: $visible, toggleDisplay: $toggleDisplay, $switch: $switch, canYouSeeMe: canYouSeeMe, focus: $focus, disabled: $disabled, enabled: $enabled, addHover: $addHover, addClass: $addClass, removeClass: $removeClass, select: $select, selectChild: $selectChild, F: $F, $F: $F, addEvent: $addEvent, removeEvent: $removeEvent, removeAllEvents: $removeAllEvents, clearEvent: $clearEvent, stopBubble: $stopBubble, delayCall: $delayCall, DC: $DC, createCookie: $createCookie, readCookie: $readCookie, cloneObject: $cloneObject, addScript: $addScript, htmlEncode: $htmlEncode, urlParam: $urlParam, helpText: $helpText, scrollTop: $scrollTop, scrollBottom: $scrollBottom, callback: $Func, hideMsg: $hideMsg, empty: function () { }, addCss: function (C, B) { var A = $$("link", C); A.setAttribute("type", "text/css"); A.setAttribute("rel", "stylesheet"); A.setAttribute("href", B); document.getElementsByTagName("head")[0].appendChild(A); return A }, getUrl: function (A, D) { var B = new Sys.Net.WebRequest(); B.set_httpVerb("GET"); B.set_url(A); B.add_completed(function (G) { if (G.get_responseAvailable()) { var E = G.get_responseData(); D(E) } }); var C = new Sys.Net.XMLHttpExecutor(); B.set_executor(C); C.executeRequest() }, newNode: function (A) { return $$(A) }, select: function (D, A) { var C = []; for (var B = 0; B < D.length; B++) { if (A(D[B])) { C.push(D[B]) } } return C }, find: function (D, A) { for (var B = 0; B < D.length; B++) { var C = A(D[B]); if (C) { return D[B] } } return null }, foreach: function (B, C) { for (var A = 0; A < B.length; A++) { C(B[A], (A == B.length - 1)) } }, bind: function (B, A) { return function () { return B.apply(A, arguments) } }, bindAsEventListener: function (B, A) { return function (C) { return B.call(A, C || window.event) } }, trim: function (A) { return A.replace(/^\s*|\s*$/g, "") }, stripTags: function (A) { return A.replace(/<\/?[^>]+>/gi, "") }, newLocation: function (A, B) { return { label: A, p: B, toggle: "none"} }, mapArrayToString: function (A) { var D = "["; for (var C = 0; C < A.length; C++) { var E = A[C]; D += "{"; for (var B in E) { D += "'" + B + "': '" + E[B] + "'," } D = D.substring(0, D.length - 1); D += "}," } D = D.substring(0, D.length - 1); D += "]"; return D }, stringToMapArray: function (str) { eval("var arr = " + str); return arr }, addRefreshLink: function (B, A) { }, getXmlDoc: function (A) { return new XMLDOM(A) }, getFirstNode: function (B, A) { return this.getNodes(B, A)[0] }, getNodes: function (C, B) { var D = B.split(":"); if (D.length == 1) { return C.getElementsByTagName(D[0]) } else { var A = C.getElementsByTagName(D.shift())[0]; while (D.length != 1) { A = A.getElementsByTagName(D.shift())[0] } return A.getElementsByTagName(D.shift()) } }, getNodeChildValue: function (C, B) { var A = C.getElementsByTagName(B); if (A.length == 0) { return "" } else { if (A[0].firstChild == null) { return "" } else { return A[0].firstChild.nodeValue } } }, isFlashInstalled: function () { var C; if (navigator.plugins) { C = navigator.plugins["Shockwave Flash"] != null } if (!C && ie) { for (var A = 8; A >= 3; A--) { try { new ActiveXObject("ShockwaveFlash.ShockwaveFlash." + A); return true } catch (B) { } } } return C }, setClassName: function (B, A) { B.className = A }, encodeURIComponent: (window.encodeURIComponent ? window.encodeURIComponent : escape), fix: function (A) { if (!A) { A = window.event } if (!A) { return null } if (!A.stopPropagation) { A.stopPropagation = Func("this.cancelBubble = true") } if (!A.preventDefault) { A.preventDefault = Func("this.returnValue = true") } if (typeof A.layerX == "undefined" && typeof A.offsetX == "number") { A.layerX = A.offsetX; A.layerY = A.offsetY } if (A.target) { if (A.target.nodeType == 3) { A.target = A.target.parentNode } } if (!A.target && A.srcElement) { A.target = A.srcElement; if (A.type == "onmouseout") { A.relatedTarget = A.toElement } else { if (A.type == "onmouseover") { A.relatedTarget = A.fromElement } } } A.fixed = true; return A }, getViewportWidth: function () { var A = 0; if (document.documentElement && document.documentElement.clientWidth) { A = document.documentElement.clientWidth } else { if (document.body && document.body.clientWidth) { A = document.body.clientWidth } else { if (window.innerWidth) { A = window.innerWidth - 18 } } } return A }, getContentHeight: function () { if (document.body && document.body.offsetHeight) { return document.body.offsetHeight } }, getViewportHeight: function () { var A = 0; if (window.innerHeight) { A = window.innerHeight - 18 } else { if (document.documentElement && document.documentElement.clientHeight) { A = document.documentElement.clientHeight } else { if (document.body && document.body.clientHeight) { A = document.body.clientHeight } } } return A }, getViewportScrollX: function () { var A = 0; if (document.documentElement && document.documentElement.scrollLeft) { A = document.documentElement.scrollLeft } else { if (document.body && document.body.scrollLeft) { A = document.body.scrollLeft } else { if (window.pageXOffset) { A = window.pageXOffset } else { if (window.scrollX) { A = window.scrollX } } } } return A }, getViewportScrollY: function () { var A = 0; if (document.documentElement && document.documentElement.scrollTop) { A = document.documentElement.scrollTop } else { if (document.body && document.body.scrollTop) { A = document.body.scrollTop } else { if (window.pageYOffset) { A = window.pageYOffset } else { if (window.scrollY) { A = window.scrollY } } } } return A }, centerDiv: function (C, B) { var A = ((PF.getViewportHeight() - C.offsetHeight) / 2); if (A < 0) { A = 10 } C.style.left = ((PF.getViewportWidth() - C.offsetWidth) / 2) + "px"; C.style.top = A + (B == true ? 0 : PF.getViewportScrollY()) + "px" }, changeParent: function (C, A) { var D = (C.tagName ? C : $(C)); D.parentNode.removeChild(D); if (A != null) { var B = (A.tagName ? A : $(A)); B.appendChild(D) } }, setBusy: function () { var A = $("busyUI"); $D(A); A.style.height = Math.max(PF.getContentHeight(), "1000") + "px" }, setIdle: function () { var A = $("busyUI"); $ND(A); A.style.height = "0px" }, setInnerText: function (A, B) { if (Browser.isFirefox) { A.textContent = B } else { A.innerText = B } }, toggleVisibility: function (A) { var B = $(A); if ($isVisible(B)) { $nodisplay(B) } else { $display(B) } }, makeOnTop: function (A) { A.style.zIndex = PF.LastZIndex++ }, showProgress: function (A) { $display("Progress") }, hideProgress: function () { $nodisplay("Progress") }, getPosition: function (B) { var A = Sys.UI.DomElement.getBounds(B); return [A.x, A.y, A.width, A.height] }, disableAllFrames: function () { for (var A = 0; A < window.frames.length; A++) { window.frames[A].disabled = true } }, opacity: function (I, E, C, D, H) { var B = (C - E) / 4; var G = D / 4; PF.changeOpac(E, I); function A(J) { PF.changeOpac(J, I); if (J == C) { if (C == 100) { PF.clearOpac(I) } if (H) { H() } return } J += B; window.setTimeout(function () { A(J) }, G) } window.setTimeout(function () { A(E) }, G) }, changeOpac: function (B, C) { var A = $(C).style; A.opacity = (B / 100); A.MozOpacity = (B / 100); A.KhtmlOpacity = (B / 100); A.filter = "alpha(opacity=" + B + ")" }, setOpac: function (A, B) { PF.changeOpac(A, B) }, clearOpac: function (B) { var A = $(B).style; A.opacity = null; A.MozOpacity = null; A.KhtmlOpacity = null; A.filter = null }, shiftOpac: function (B, A) { if ($(B).style.opacity == 0) { PF.opacity(B, 0, 100, A) } else { PF.opacity(B, 100, 0, A) } }, currentOpac: function (D, A, C) { var B = 100; if ($(D).style.opacity < 100) { B = $(D).style.opacity * 100 } PF.opacity(D, B, A, C) }, dumpException: function (A) { if (null == A) { return } if (typeof A.get_message == "function") { var B = A.get_message(); B += "\r" + A.get_stackTrace(); App.addError(B) } }, getErrorMessage: function (A) { if (null == A) { return Lang.UNKNOWN_ERROR } if (typeof A.get_message == "function") { var B = A.get_message(); return B } else { return Lang.UNKNOWN_ERROR } }, formatText: function (C) { var A = C.split("\n"); var B = A.join("<br />"); return B }, blockUI: function (C) { $display("blockUI"); var B = $("blockUI"); if (B != null) { B.style.height = Math.max(PF.getContentHeight(), 1000) + "px" } if (C) { var A = $("BusyDialog"); if (null != A) { PF.centerDiv(A); T("BusyDialogMsg", C); $visible(A) } } if (EM) { EM.onBlockUI() } }, hideBlockMsg: function () { PF.hide("BusyDialog") }, unblockUI: function () { $nodisplay("blockUI"); var A = $("BusyDialog"); if (A != null) { $hide(A) } if (EM) { EM.onUnblockUI() } }, exec: function (A) { A = A.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\n/g, "\\n").replace(/\r/g, "\\n"); setTimeout('try { eval("' + A + '"); } catch(ex) {  }', 0) }, until: function (B, A) { if (B() == true) { A() } else { window.setTimeout(function () { PF.until(B, A) }, 100) } }, findParent: function (C, A, D) { var B = C.parentNode; while (B != null) { if (B.tagName == A) { if (D) { if (B.id == D) { return B } } else { return B } } B = B.parentNode } }, primaryFrameworkLoaded: function () { return (typeof PrimaryFramework != "undefined") }, secondaryFrameworkLoaded: function () { return (typeof SecondaryFramework != "undefined") } }; var SearchEngineEnum = { Google: 0, Yahoo: 1, MSN: 2 };

var SearchForm = { _so: null, _engine: null, show: false, e: new Array(), init: function () { SearchForm.e[SearchEngineEnum.Google] = "google"; SearchForm.e[SearchEngineEnum.MSN] = "msn"; SearchForm.e[SearchEngineEnum.Yahoo] = "yahoo"; var A = IMAGE_PREFIX + "App_Themes/common/"; if (typeof SHOW_SEARCH_BAR != "undefined") { SearchForm.show = SHOW_SEARCH_BAR; if (SearchForm.show == "false" || SearchForm.show == false) { PF.ND("searchForm") } else { SearchForm.open() } } }, searchFormSubmit: function () { _searchText = escape($("searchFormText").value); var A = ""; var B = new Array(); B.google = "http://www.google.com/search"; B.yahoo = "http://search.yahoo.com/search"; B.msn = "http://search.msn.com/results.aspx"; A = B[SearchForm._engine]; if (SearchForm._engine == "msn") { A += "?q=" + $("searchFormText").value } else { if (SearchForm._engine == "yahoo") { A += "?p=" + $("searchFormText").value + "&ei=UTF-8" } else { if (SearchForm._engine == "google") { A = "http://www.google.com/custom?q=" + escape($("searchFormText").value) + "&sa=Search&client=pub-3514338521707944&forid=1&ie=UTF-8&oe=UTF-8&cof=" + escape("GALT:#008000;GL:1;DIV:#336699;VLC:663399;AH:center;BGC:FFFFFF;LBGC:336699;ALC:0000FF;LC:0000FF;T:000000;GFNT:0000FF;GIMP:0000FF;FORID:1") + "&hl=en" } } } window.open(A); $trackEvent("Search Bar", "Search", SearchForm._engine) }, searchFormToggle: function () { SearchForm._so = $("searchEngine_options"); $("Content").appendChild(SearchForm._so); var A = PU.getPosition($("searchEngine_selected")); SearchForm._so.style.top = (A[3]) + "px"; if (Browser.isSafari) { SearchForm._so.style.top = (A[3] + 10) + "px" } SearchForm._so.style.left = A[0] + "px"; if (SearchForm._so.style.display == "none") { document._onclick = document.onclick; document.onclick = function () { if (SearchForm._so.style.display == "none") { $display(SearchForm._so) } else { $nodisplay(SearchForm._so); document.onclick = document._onclick; document._onclick = null } } } }, searchFormSelect: function (C) { var A = $("searchEngine_selectedImg"); if (A == null) { return } var D = "App_Themes/common/"; SearchForm._engine = C; if (!Browser.isIE) { SearchForm.searchFormToggle() } var B = new Array(); B.google = SearchEngineEnum.Google; B.yahoo = SearchEngineEnum.Yahoo; B.msn = SearchEngineEnum.MSN; if (typeof (App) == "object") { App.SearchEngineType = B[C]; App.saveUserInfo(); SEARCH_BAR_TYPE = B[C] } A.src = D + C + "_icon.gif"; $trackEvent("Search Bar", "Provider Change", SearchForm._engine) }, over: function (A) { A.className = "searchFormEngineOver" }, out: function (A) { A.className = "searchFormEngineOut" }, close: function (A) { if (A || confirm("Are you sure you want to remove search bar?")) { $nodisplay("searchForm"); if (!A) { App.ShowSearchBar = false; App.saveUserInfo() } } }, open: function () { var A = $("searchEngine_selectedImg"); if (A == null) { return } $display("searchForm"); var B = "App_Themes/common/"; if (SearchForm.e[SEARCH_BAR_TYPE]) { SearchForm._engine = SearchForm.e[SEARCH_BAR_TYPE]; $("searchEngine_selectedImg").src = B + SearchForm._engine + "_icon.gif" } else { if (typeof (App) == "object") { if (SearchForm._engine = App.SearchEngineType) { } else { SearchForm._engine = "google" } } } $focus("searchFormText") } }; 
var PageProgress = { show: function () { $display("PageLoadProgress") }, hide: function () { $nodisplay("PageLoadProgress") } }; var Debug = { windowCreated: false, Print: function (B) { if (!Debug.windowCreated) { Debug._createWindow() } var A = PF.$("DebugWindow"); A.innerHTML = A.innerHTML + "<br/>" + B }, _createWindow: function () { var B = $$("div", "debugDiv"); B.style.position = "absolute"; var A = '<div id="DebugWindow" style="z-index:61000;background: yellow none repeat scroll 0%; border: 1px solid #333333">PF Javascript Debug.Print Window</div>'; B.innerHTML = A; document.body.appendChild(B); Debug.windowCreated = true } }; if (typeof HTMLElement != "undefined" && !HTMLElement.prototype.insertAdjacentElement) { HTMLElement.prototype.insertAdjacentElement = function (A, B) { switch (A) { case "beforeBegin": this.parentNode.insertBefore(B, this); break; case "afterBegin": this.insertBefore(B, this.firstChild); break; case "beforeEnd": this.appendChild(B); break; case "afterEnd": if (this.nextSibling) { this.parentNode.insertBefore(B, this.nextSibling) } else { this.parentNode.appendChild(B) } break } }; HTMLElement.prototype.insertAdjacentHTML = function (B, D) { var C = this.ownerDocument.createRange(); C.setStartBefore(this); var A = C.createContextualFragment(D); this.insertAdjacentElement(B, A) }; HTMLElement.prototype.insertAdjacentText = function (B, C) { var A = document.createTextNode(C); this.insertAdjacentElement(B, A) } } function insertAdjacentHTML(D, B, E) { var C = D.ownerDocument.createRange(); C.setStartBefore(D); var A = C.createContextualFragment(E); D.insertAdjacentElement(B, A) } function insertAdjacentElement(C, B, A) { switch (B) { case "beforeBegin": C.parentNode.insertBefore(parsedNode, this); break; case "afterBegin": C.insertBefore(parsedNode, this.firstChild); break; case "beforeEnd": C.appendChild(parsedNode); break; case "afterEnd": if (C.nextSibling) { C.parentNode.insertBefore(parsedNode, C.nextSibling) } else { C.parentNode.appendChild(parsedNode) } break } } function animateStartButton() { } $head = document.getElementsByTagName("head")[0]; $track = function (A) { if (typeof (GA.googlePageViewTracker) == "function") { setTimeout(function () { GA.googlePageViewTracker(A) }, 100) } }; $trackEvent = function (D, C, A, B) { if (typeof (GA.googleEventTracker) == "function") { setTimeout(function () { GA.googleEventTracker(D, C, A, B) }, 100) } }; $trackEventNoTimeOut = function (D, C, A, B) { if (typeof (GA.googleEventTracker) == "function") { GA.googleEventTracker(D, C, A, B) } }; $alert = function (A) { if (typeof (console) != "undefined") { console.log(A) } }; PF.setOpacity = PF.setOpac; PF.currentOpacity = PF.currentOpac; PF.shiftOpacity = PF.shiftOpac; PF.clearOpacity = PF.clearOpac;